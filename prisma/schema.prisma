datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Run {
  id               String    @id @default(uuid())
  startEpoch       DateTime  @map("start_epoch_ms") @db.Timestamptz(6)
  endEpoch         DateTime  @map("end_epoch_ms") @db.Timestamptz(6)
  activeDurationMs BigInt    @map("active_duration_ms")
  distance         Float
  pace             Float
  summaries        Summary[]
  tagId            String
  metrics          Metric[]
  moments          Moment[]
  userId           String
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  tags Tags  @relation(fields: [tagId], references: [id])
  User User? @relation(fields: [userId], references: [id])
}

model Summary {
  id         Int        @id @default(autoincrement())
  runId      String     @map("run_id")
  metricType MetricType @map("metric_type")
  summary    String?
  value      Float
  Run        Run        @relation(fields: [runId], references: [id])
}

enum Terrain {
  road
  trail
  track
  unknown
  treadmill
}

model Tags {
  id                 String   @id @default(uuid())
  name               String?  @map("name")
  goalType           String?  @map("goal_type")
  originalActivityId String?  @map("original_activity_id")
  temperature        Float?
  weather            String?
  location           String?  @default("outdoors")
  note               String?
  rpe                Int?
  shoeId             String?  @map("shoe_id")
  terrain            Terrain? @default(unknown)
  Run                Run[]
}

enum MetricType {
  elevation
  distance
  pace
  latitude
  heart_rate
  calories
  steps
  nikefuel
  speed
  descent
  ascent
  longitude
  stars
  rpe
}

enum Units {
  KM
  STEP
  KCAL
  KMH
  MKM
  BPM
  M
  DD
  STAR
  RATING
}

model Metric {
  id     Int        @id @default(autoincrement())
  runId  String     @map("run_id")
  type   MetricType
  unit   Units
  values Json

  Run Run @relation(fields: [runId], references: [id])

  @@index([runId])
}

model Moment {
  id        Int      @id @default(autoincrement())
  runId     String   @map("run_id")
  key       String
  value     String
  timestamp DateTime @db.Timestamptz(6)

  Run Run @relation(fields: [runId], references: [id])

  @@index([runId])
}

enum GoalCategory {
  Performance
  Outcome
}

model Goal {
  id           String       @id @default(uuid())
  userId       String
  goalCategory GoalCategory @map("goal_category")
  description  String
  target       Float?
  startDate    DateTime?    @map("start_date")
  endDate      DateTime?    @map("end_date")
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  id_token          String?
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  runs          Run[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Goal      Goal[]
}
